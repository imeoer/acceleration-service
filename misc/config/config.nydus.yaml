# Configuration file of Harbor Acceleration Service

# http related config
server:
  name: API
  # listened host for http
  host: 0.0.0.0
  # port for http
  port: 2077

metric:
  # export metrics on `/metrics` endpoint
  enabled: true

provider:
  source:
    # hostname of harbor service
    hub.harbor.com:
      # base64 encoded `<robot-name>:<robot-secret>` for robot
      # account created in harbor
      auth: YTpiCg==
      # skip verifying server certs for HTTPS source registry
      insecure: false
      webhook:
        # webhook request auth header configured in harbor
        auth_header: header
    localhost:
      auth: YWRtaW46SGFyYm9yMTIzNDU=
  containerd:
    # ensure containerd service listening on this address
    address: /run/containerd/containerd.sock
    snapshotter: overlayfs

converter:
  # number of worker for executing conversion task
  worker: 5
  # enable to add harbor specified annotations to converted image for tracking.
  harbor_annotation: true
  driver:
    # accelerator driver type: `nydus`
    type: nydus
    config:
      work_dir: /tmp

      # `nydus-image` binary path, download it from:
      # https://github.com/dragonflyoss/image-service/releases (require v2.0.0 or higher)
      builder: nydus-image

      # convert to OCI-referenced nydus image.
      oci_ref: true

      # specify nydus format version, possible values: `5`, `6` (EROFS-compatible), default is `5`
      # fs_version: 5

      # specify nydus blob compression algorithm, possible values: `none`, `lz4_block`, `gzip`, `zstd`, default is `lz4_block`
      # compressor: zstd

      # ensure that both OCIv1 manifest and nydus manifest are present as manifest index in the target image.
      # it's used for containerd to support running OCIv1 image or nydus image simultaneously with a single image reference.
      # note: please ensure that OCIv1 manifest already exists in target image reference.
      # merge_manifest: true

      # nydus chunk dict image reference, used for chunk-leveled data deduplication.
      # chunk_dict_ref: localhost/chunk_dict/image:latest

      # specify a storage backend for storing nydus blob, optional, possible values: oss, localfs
      # backend_type: oss
      # backend_config: '{"endpoint":"","access_key_id":"","access_key_secret":"","bucket_name":""}'

      # backend_type: localfs
      # backend_config: '{"dir":"/path/to/dir"}'
  rules:
    # add suffix to tag of source image reference as target image reference
    - tag_suffix: -nydus
